library(Seurat)
library(Signac)
library(GenomeInfoDb)
library(harmony) 
library(EnsDb.Mmusculus.v79)
library(ggplot2)
library(tibble)
library(dplyr)
library(harmony)
library(BSgenome.Mmusculus.UCSC.mm10)
library(patchwork)
set.seed(1234)

Fig2A_ref <- DimPlot(CNT_PC, reduction = "umap.PCwnn2", label = TRUE, repel = TRUE, label.size = 2.5) + NoLegend()
Fig2A_1 <- DimPlot(CNT_PC, reduction = "umap.PCwnn2", 
                   label = TRUE, repel = TRUE, label.size = 3,
                   group.by = "seurat_clusters") + NoLegend() #480x470
Fig2A_2 <- DimPlot(CNT_PC, reduction = "umap.PCwnn2", 
                   label.size = 3,
                   group.by = "disease2",cols = c("#00BFC4","#F8766D"))+ NoLegend() 
Idents(CNT_PC) <- "subtype2"
DefaultAssay(CNT_PC) <- "SCT"
marker <- FindAllMarkers(CNT_PC,only.pos = T,logfc.threshold = 0.5)

features <- c("Ptprd","Slc8a1","Calb1","Malrd1","Egfem1","Mgat4c","Spock3","Scel",
              "Aqp2","Pde1a","Pcdh7","Slc14a2","Slc12a2","Spp1")
levels(CNT_PC) <- rev(levels(CNT_PC))
Fig2B <- DotPlot(CNT_PC, features = features, cols = c("lightyellow","royalblue")) +
  RotatedAxis() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) #780x400
levels(CNT_PC) <- rev(levels(CNT_PC))

hCNT_PC <- readRDS("humanADPKD_CNT_PC.rds") #Human ADPKD/control dataset; CNT-PC cluster Nat Commun.2022 Oct 30;13(1):6497.
Idents(hCNT_PC) <- "disease"
hCNT_PC <- subset(hCNT_PC, idents = "PKD")
library(biomaRt)
library(Matrix)
human_gene <- rownames(hCNT_PC)
human <- useMart("ensembl", dataset = "hsapiens_gene_ensembl", host = "https://dec2021.archive.ensembl.org/")
mouse <- useMart("ensembl", dataset = "mmusculus_gene_ensembl", host = "https://dec2021.archive.ensembl.org/")

converted_genelist = getLDS(attributes = c("hgnc_symbol"), 
                            filters = "hgnc_symbol", 
                            values = human_gene , 
                            mart = human, 
                            attributesL = c("mgi_symbol"), 
                            martL = mouse, uniqueRows=T)

converted_genelist <- converted_genelist %>% distinct(MGI.symbol,.keep_all=TRUE)


Idents(CNT_PC) <- "disease"
CNT_PC <- subset(CNT_PC,idents = c("P66-pkd","P100-pkd","P130-pkd"))
CNT_PC_count <- CNT_PC@assays[["RNA"]]@counts

hCNT_PC_count <- as.data.frame(hCNT_PC@assays[["RNA"]]@counts)
hCNT_PC_count$HGNC.symbol <- rownames(hCNT_PC_count)
hCNT_PC_count <-  merge(hCNT_PC_count,converted_genelist,by = "HGNC.symbol")
rownames(hCNT_PC_count) <- hCNT_PC_count$MGI.symbol
hCNT_PC_count <- hCNT_PC_count[,2:10190]

hCNT_PC <- CreateSeuratObject(counts = hCNT_PC_count)
s.genes <- cc.genes$s.genes
g2m.genes <- cc.genes$g2m.genes
converted_genelist2 = getLDS(attributes = "hgnc_symbol", filters = "hgnc_symbol", values = s.genes , 
                             mart = human, attributesL = "mgi_symbol", martL = mouse, uniqueRows=T)
s.genes <- converted_genelist2$MGI.symbol
converted_genelist3 = getLDS(attributes = "hgnc_symbol", filters = "hgnc_symbol", values = g2m.genes , 
                             mart = human, attributesL = "mgi_symbol", martL = mouse, uniqueRows=T)
g2m.genes <- converted_genelist3$MGI.symbol
hCNT_PC <- CellCycleScoring(hCNT_PC, s.features = s.genes, g2m.features = g2m.genes)
hCNT_PC <- PercentageFeatureSet(hCNT_PC, pattern = "^mt-", col.name = "percent.mt")
hCNT_PC <- SCTransform(hCNT_PC, vars.to.regress = c("percent.mt", "nCount_RNA","S.Score", "G2M.Score"))
hCNT_PC <- RunPCA(hCNT_PC)

CNT_PC <- SCTransform(CNT_PC, vars.to.regress = c("percent.mt", "nCount_RNA","S.Score", "G2M.Score"))
CNT_PC <- RunPCA(CNT_PC)

PC.anchors <- FindTransferAnchors(
  reference = CNT_PC, query = hCNT_PC, dims = 1:30,reduction = "cca",
  reference.assay = 'SCT',
  query.assay = 'SCT')

predictions <- TransferData(anchorset = PC.anchors, refdata = CNT_PC$subtype2, dims = 1:30,
                            weight.reduction = "cca")
hCNT_PC <- readRDS("humanADPKD_CNT_PC.rds") 
Idents(hCNT_PC) <- "disease"
hCNT_PC <- subset(hCNT_PC, idents = "PKD")
hCNT_PC <- AddMetaData(hCNT_PC,predictions)
DimPlot(hCNT_PC,group.by = "predicted.id")
Idents(hCNT_PC) <- "subtype"
N_CNT <- subset(hCNT_PC,idents = "N-CNT")
N_PC <- subset(hCNT_PC,idents = "N-PC")
PKD_CNT <- subset(hCNT_PC,idents = "PKD-CNT")
PKD_PC1 <- subset(hCNT_PC,idents = "PKD-PC1")
PKD_PC2 <- subset(hCNT_PC,idents = "PKD-PC2")
PKD_PC3 <- subset(hCNT_PC,idents = "PKD-PC3")
test1 <- as.data.frame(table(N_CNT@meta.data[["predicted.id"]]))
colnames(test1) <- c("celltype","N_CNT")
test2 <- as.data.frame(table(N_PC @meta.data[["predicted.id"]]))
colnames(test2) <- c("celltype","N_PC ")
test3 <- as.data.frame(table(PKD_CNT@meta.data[["predicted.id"]]))
colnames(test3) <- c("celltype","PKD_CNT")
test4 <- as.data.frame(table(PKD_PC1 @meta.data[["predicted.id"]]))
colnames(test4) <- c("celltype","PKD_PC1 ")
test5 <- as.data.frame(table(PKD_PC2@meta.data[["predicted.id"]]))
colnames(test5) <- c("celltype","PKD_PC2")
test6 <- as.data.frame(table(PKD_PC3@meta.data[["predicted.id"]]))
colnames(test6) <- c("celltype","PKD_PC3")

test6 <- rbind(test6[1,],c(NA,0),test6[2:7,])
rownames(test6) <- rownames(test1)

test <- cbind(test1[,2],test2[,2],test3[,2],test4[,2],test5[,2],test6[,2])
rownames(test) <- test1[,1]
colnames(test) <- c("N-CNT","N-PC","PKD-CNT","PKD-PC1","PKD-PC2","PKD-PC3")
#test <-test[c(1,2,7,3,4,5,6,8),]
test <-test[,c(1,3,2,4,5,6)]
Fig2D <- pheatmap::pheatmap(test,scale = "column",cluster_rows = F,cluster_cols = F,border_color = "black") #480x380
#420x380

#################DEG####################
DiseaseMarkers <- function(cluster, seurat_obj, test, ref, meta_group) {
  print(paste0("Comparing DEG for: ",cluster))
  rnaAggr <- seurat_obj
  group <- dplyr::select(rnaAggr@meta.data, all_of(meta_group))[,1]
  rnaAggr@meta.data$celltype.stim <- paste0(rnaAggr@meta.data$subtype2,"_", group)
  Idents(rnaAggr) <- "celltype.stim"
  deg <- tryCatch(FindMarkers(rnaAggr, 
                              ident.1 = paste0(cluster,"_", test),  
                              ident.2 = paste0(cluster, "_", ref),
                              logfc.threshold = 0.05),
                  error=function(e) NULL)
  return(deg)
}


idents <- levels(CNT_PC)

list.disease.deg_P66 <- lapply(idents, function(x) {DiseaseMarkers(x, seurat_obj = CNT_PC, test="P66-pkd", ref="P66-cont", meta_group="disease")})                          
write.xlsx(list.disease.deg_P66, file = "P66-pkd_vs_cont_deg.xlsx", sheetName = idents, rowNames = T)

list.disease.deg_P130 <- lapply(idents, function(x) {DiseaseMarkers(x, seurat_obj = CNT_PC, test="P130-pkd", ref="P130-cont", meta_group="disease")})                          
write.xlsx(list.disease.deg_P130, file = "P130-pkd_vs_cont_deg.xlsx", sheetName = idents, rowNames = T)

library(EnhancedVolcano)
#If connector does not work, do selectLab =F (deactivate) once.
#600x700

cPC2_P130 <- EnhancedVolcano(list.disease.deg_P130[[5]],
                             lab = rownames(list.disease.deg_P130[[5]]),
                             x = 'avg_log2FC',
                             y = 'p_val_adj',
                             xlim = c(-1.25,1.25),
                             FCcutoff = 0.5,
                             pCutoff = 0.05,
                             pointSize = 1,
                             colCustom = NULL,
                             drawConnectors = F,
                             min.segment.length = 1,
                             boxedLabels = F,
                             labSize = 3.5,
                             col = c('black', 'black', 'blue', 'red'))

mPC1_P130 <- EnhancedVolcano(list.disease.deg_P130[[6]],
                             lab = rownames(list.disease.deg_P130[[6]]),
                             x = 'avg_log2FC',
                             y = 'p_val_adj',
                             xlim = c(-2,2),
                             FCcutoff = 0.5,
                             pCutoff = 0.05,
                             pointSize = 1,
                             colCustom = NULL,
                             drawConnectors = T,
                             min.segment.length = 1,
                             boxedLabels = F,
                             labSize = 3.5,
                             col = c('black', 'black', 'blue', 'red'))

cPC2_P66 <- EnhancedVolcano(list.disease.deg_P66[[5]],
                            lab = rownames(list.disease.deg_P66[[5]]),
                            x = 'avg_log2FC',
                            y = 'p_val_adj',
                            xlim = c(-1.5,1.5),
                            FCcutoff = 0.25,
                            pCutoff = 0.05,
                            pointSize = 1,
                            colCustom = NULL,
                            drawConnectors = T,
                            min.segment.length = 1,
                            boxedLabels = F,
                            labSize = 3.5,
                            col = c('black', 'black', 'blue', 'red'))

mPC1_P66 <- EnhancedVolcano(list.disease.deg_P66[[6]],
                            lab = rownames(list.disease.deg_P66[[6]]),
                            x = 'avg_log2FC',
                            y = 'p_val_adj',
                            xlim = c(-1.5,1.5),
                            FCcutoff = 0.25,
                            pCutoff = 0.05,
                            pointSize = 1,
                            colCustom = NULL,
                            drawConnectors = T,
                            min.segment.length = 1,
                            boxedLabels = F,
                            labSize = 3.5,
                            col = c('black', 'black', 'blue', 'red'))


######### vision #########

library(VISION)
signatures <- "mh.all.v2022.1.Mm.symbols.gmt"
vision.obj <- Vision(CNT_PC@assays[["SCT"]]@data, signatures = signatures)
options(mc.cores=16)
vision.obj <- analyze(vision.obj)

sigScores <- getSignatureScores(vision.obj)
sigScores <- as.data.frame(sigScores)

CNT_PC[['GSEA']] <- CreateAssayObject(counts = t(sigScores))
DefaultAssay(CNT_PC) <- "GSEA"
CNT_PC <- ScaleData(CNT_PC)

mPC1 <- subset(CNT_PC,idents = "mPC1")
Idents(mPC1) <- "disease"
distal_avg1 <- AverageExpression(mPC1,assays = "GSEA")
mPC1_heatmap <- pheatmap::pheatmap(distal_avg1[["GSEA"]][,c(5,6,3,4,1,2)],scale = "row", cluster_cols = T,cluster_rows = T, ) #650x720

DefaultAssay(CNT_PC) <- "GSEA"
PC3 <- subset(CNT_PC,idents = c("cPC2","mPC1"))
PC3@meta.data[["subtype2_disease"]] <- paste0(PC3@meta.data[["subtype2"]],"_",PC3@meta.data[["disease"]])
Idents(PC3) <- "subtype2_disease"
levels(PC3) <- c("cPC2_P66-cont","cPC2_P66-pkd",
                 "cPC2_P100-cont","cPC2_P100-pkd",
                 "cPC2_P130-cont","cPC2_P130-pkd",
                 "mPC1_P66-cont","mPC1_P66-pkd",
                 "mPC1_P100-cont","mPC1_P100-pkd",
                 "mPC1_P130-cont","mPC1_P130-pkd")
distal_avg <- AverageExpression(PC3,assays = "GSEA")

Fig2E <- pheatmap::pheatmap(distal_avg[["GSEA"]][mPC1_heatmap[["tree_row"]][["order"]],],scale = "row", cluster_cols = F,cluster_rows = F, )

TargetPC <- subset(CNT_PC,idents = c("cPC2","mPC1"))
TargetPC@meta.data[["subtype3"]] <- paste0(TargetPC@meta.data[["disease"]],"_",TargetPC@meta.data[["subtype2"]])
Idents(TargetPC) <- "subtype3"
TargetPC <- subset(TargetPC,idents = c("P66-cont_cPC2","P66-pkd_cPC2","P66-cont_mPC1","P66-pkd_mPC1",
                                       "P130-cont_cPC2","P130-pkd_cPC2","P130-cont_mPC1","P130-pkd_mPC1"))
levels(TargetPC) <- c("P66-cont_cPC2","P130-cont_cPC2","P66-pkd_cPC2","P130-pkd_cPC2",
                      "P66-cont_mPC1","P130-cont_mPC1","P66-pkd_mPC1","P130-pkd_mPC1")

mPC1 <- subset(TargetPC,idents = levels(TargetPC)[5:8])
marker <- FindAllMarkers(mPC1,only.pos = T)

marker %>%
  group_by(cluster) %>%
  top_n(n = 5, wt = avg_log2FC) -> top5

features <- unique(top5$gene)
#> features
#[1] "Kif26b"  "Myo3b"   "Myo9a"   "Pcdh7"   "Bcas3"   "Gm43305" "Pde7b"   "Pde7a"  
#[9] "Zfpm2"   "Klhl14"  "Ranbp3l" "Hbb-bs"  "Fermt1"  "Hnrnpr"  "Akr1b3"  "Spp1"   
#[17] "Tmsb4x"  "S100a6"  "Mgat4c"  "Resf1"   
features <- features[c(-6,-10)]

levels(mPC1) <- rev(levels(mPC1))
Fig2F <- DotPlot(mPC1, features = features, cols = c("lightyellow","royalblue")) +
  RotatedAxis() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) #780x400
levels(mPC1) <- rev(levels(mPC1))

